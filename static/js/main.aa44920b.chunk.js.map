{"version":3,"sources":["components/Trello/Trello.js","components/Wakatime/Wakatime.js","App.js","registerServiceWorker.js","index.js"],"names":["apiData","Trello","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","dataFromToday","_this2","date","range","grand_total","hours","fetch","then","response","json","data","filter","item","name","length","urlTrello","card","JSON","stringify","idList","dueComplete","desc","total_seconds","toString","method","headers","Content-Type","Accept","body","setState","shortUrl","catch","e","displayMessage","_this3","react_default","a","createElement","className","href","onClick","createCard","Component","Wakatime","error","isLoaded","items","fetchJsonp","res","result","_this$state","today","text","map","index","key","digital","components_Trello_Trello","App","components_Wakatime_Wakatime","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.aa44920b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Trello.css';\n\nconst apiData = {\n  key: '983d58bda5b2717b3acff835fdb1b400',\n  token: '4dd2a9459992e00f91b7d34f3ff3a1ca7f606921e12c02ce8b19b74cf65e043e',\n  idList: '5b3d742499c8cda9a8ff07db'\n}\nclass Trello extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n    };\n  }\n\n  createCard (dataFromToday) {\n    let date = dataFromToday.range.date;\n\n    if (dataFromToday.grand_total.hours >= 1){\n      let urlCards = 'https://api.trello.com/1/lists/' + apiData.idList + '/cards/?key='\n                    + apiData.key +  '&token=' + apiData.token;\n      fetch (urlCards)\n      .then((response) => response.json())\n      .then(data => {\n        let cardDate =  data.filter(item => {\n          return item.name === date\n        });\n        if (cardDate.length === 0) {\n          let urlTrello = 'https://api.trello.com/1/cards?key=' + apiData.key\n                      + '&token=' + apiData.token;\n          let card = JSON.stringify({\n            name: date,\n            idList: apiData.idList,\n            dueComplete: true,\n            desc: dataFromToday.grand_total.total_seconds.toString()\n          });\n\n          fetch(urlTrello, {\n            method: \"post\",\n            headers : {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            body: card\n          }).then((response) => response.json())\n          .then(data => {\n            this.setState({ message: \"Created Card at \" + data.shortUrl });\n          }).catch((e) => {\n            this.setState({ message: e });\n          });\n        } else {\n          this.setState({ message: \"The card for \" + date + \" already exists\" });\n        }\n      });\n    } else {\n      this.setState({message: \"Cards are created only for one or more hours of coding\"});\n    }\n\n  }\n  render (){\n    let displayMessage;\n    if (this.state.message !== \"\") {\n      displayMessage = <div className=\"msg\">{ this.state.message }</div>\n    }\n\n    return (\n      <div className=\"trello\">\n        <blockquote className=\"trello-board-compact\">\n          <a href=\"https://trello.com/b/U4hPL2dX/wakatime-activity-code\">Trello Board</a>\n        </blockquote>\n        <button className=\"btn\" onClick={ (e) => this.createCard(this.props.data, e) }>\n          { this.props.name }\n        </button>\n        { displayMessage }\n      </div>\n\n    );\n  }\n}\n\nexport default Trello;","import React, {Component} from 'react';\nimport fetchJsonp from 'fetch-jsonp';\nimport './Wakatime.css';\nimport Trello from '../Trello/Trello';\n\nclass Wakatime extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetchJsonp(\"https://wakatime.com/share/@dulcehc/637eb576-6b9f-49a6-9c4f-0869586de823.json\")\n      .then(res => res.json())\n      .then( (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.data\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: false,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    let today =  items.filter(item => {\n      return item.range.text === 'Today'\n    })[0];\n\n    if (error) {\n      return <div className=\"error-msg\">Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"wakatime\">\n          <table className=\"ctm-table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Time (hr)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((item, index) => (\n                <tr key={index}>\n                  <td key={\"date-\" + index}>{item.range.date}</td>\n                  <td key={\"time-\" + index}>{item.grand_total.digital}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <Trello name=\"Trello\" data={today}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Wakatime;","import React, { Component } from 'react';\nimport Wakatime from './components/Wakatime/Wakatime';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Coding activity Last 7 days</h1>\n        <Wakatime/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}